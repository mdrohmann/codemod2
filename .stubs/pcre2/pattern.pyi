from typing import Iterator
from .match import Match
from .consts import BsrChar, NewlineChar

class Pattern:
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    @property
    def options(self) -> int: ...
    @property
    def backslash_r(self) -> BsrChar: ...
    @property
    def capture_count(self) -> int: ...
    @property
    def jit_size(self) -> int: ...
    @property
    def min_length(self) -> int: ...
    @property
    def name_count(self) -> int: ...
    @property
    def newline(self) -> NewlineChar: ...
    @property
    def size(self) -> int: ...
    def name_dict(self) -> dict[int, str]: ...
    def jit_compile(self) -> None: ...
    def findall(self, subject: str, offset: int = 0) -> list[str] | list[tuple[str, ...]]: ...
    def match(self, subject: str, offset: int = 0, options: int = 0) -> Match: ...
    def scan(self, subject: str, offset: int = 0) -> Iterator[Match]: ...
    def split(self, subject: str, maxsplit: int = 0, offset: int = 0) -> list[str]: ...
    def substitute(self, replacement: str, subject: str, offset: int = 0, options: int = 0, low_memory: bool = False) -> str: ...
